//Set precision
precision mediump float;

//Per vertex attributes
attribute vec4 a_Position;
attribute vec4 a_Color;
attribute vec3 a_Normal;
attribute vec2 a_TexCoordinate;

//Uniforms
uniform mat4 u_MVPMatrix;
uniform vec2 u_TextureOffset;
uniform vec2 u_TextureScale;

//These will be passed into the fragment shader. varying = in/out in GLSL for PC.
varying vec4 v_Color;
varying vec2 v_TexCoordinate;

// The entry point for our vertex shader.
void main() {
	//Pass through the texture coordinate.
	v_TexCoordinate = a_TexCoordinate;
    v_TexCoordinate.x *= u_TextureScale.x;
    v_TexCoordinate.y *= u_TextureScale.y;
    v_TexCoordinate.x += u_TextureOffset.x;
    v_TexCoordinate.y += u_TextureOffset.y;

    //Pass the color.
    v_Color = a_Color;

	//gl_Position is a special variable used to store the final position.
	//Multiply the vertex by the matrix to get the final point in normalized screen coordinates.
	gl_Position = u_MVPMatrix * a_Position;
}